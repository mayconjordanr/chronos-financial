// CHRONOS Financial - Multi-tenant Database Schema
// Row-Level Security (RLS) enforced for all tenant data

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  previewFeatures = ["multiSchema", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp"), pgcrypto]
  schemas = ["public", "auth", "tenant"]
}

// ============================================================================
// AUTHENTICATION & TENANT MANAGEMENT (public schema)
// ============================================================================

model Tenant {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  slug            String   @unique
  subdomain       String?  @unique
  domain          String?  @unique

  // Configuration
  settings        Json     @default("{}")
  features        Json     @default("{}") // Feature flags per tenant
  limits          Json     @default("{}") // Usage limits

  // Subscription & Billing
  subscriptionId  String?
  planType        PlanType @default(STARTER)
  billingCycle    BillingCycle @default(MONTHLY)
  trialEndsAt     DateTime?

  // Status & Metadata
  status          TenantStatus @default(ACTIVE)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  users           User[]
  invitations     TenantInvitation[]
  auditLogs       AuditLog[]

  @@map("tenants")
  @@schema("public")
}

model User {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId        String   @db.Uuid

  // Identity
  email           String
  firstName       String
  lastName        String
  avatarUrl       String?

  // Authentication
  passwordHash    String?
  emailVerifiedAt DateTime?
  lastLoginAt     DateTime?

  // Settings
  language        String   @default("en")
  timezone        String   @default("UTC")
  preferences     Json     @default("{}")

  // Status & Role
  role            UserRole @default(USER)
  status          UserStatus @default(ACTIVE)

  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  sessions        UserSession[]
  auditLogs       AuditLog[]

  // Multi-tenant constraints
  @@unique([tenantId, email])
  @@map("users")
  @@schema("public")
}

model UserSession {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId          String   @db.Uuid
  tenantId        String   @db.Uuid

  // Session data
  token           String   @unique
  refreshToken    String?  @unique
  expiresAt       DateTime
  refreshExpiresAt DateTime?

  // Device info
  userAgent       String?
  ipAddress       String?
  device          String?

  // Status
  isActive        Boolean  @default(true)
  lastUsedAt      DateTime @default(now())
  createdAt       DateTime @default(now())

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
  @@schema("public")
}

model TenantInvitation {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId        String   @db.Uuid

  // Invitation details
  email           String
  role            UserRole @default(USER)
  token           String   @unique

  // Status
  status          InvitationStatus @default(PENDING)
  expiresAt       DateTime
  acceptedAt      DateTime?

  // Metadata
  invitedBy       String?  @db.Uuid
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([tenantId, email])
  @@map("tenant_invitations")
  @@schema("public")
}

// ============================================================================
// FINANCIAL DATA (tenant schema with RLS)
// ============================================================================

model Account {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId        String   @db.Uuid // RLS enforcement

  // Account details
  name            String
  type            AccountType
  subtype         AccountSubtype?
  currency        String   @default("USD")

  // Balance tracking
  balance         Decimal  @default(0) @db.Decimal(15, 2)
  availableBalance Decimal? @db.Decimal(15, 2)

  // Bank connection
  institutionId   String?
  institutionName String?
  accountNumber   String?
  routingNumber   String?

  // Configuration
  isActive        Boolean  @default(true)
  includeInBudget Boolean  @default(true)
  color           String?
  icon            String?

  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastSyncAt      DateTime?

  // Relations
  transactions    Transaction[]
  budgets         Budget[]
  goals           Goal[]

  @@map("accounts")
  @@schema("tenant")
}

model Category {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId        String   @db.Uuid // RLS enforcement

  // Category details
  name            String
  description     String?
  type            CategoryType
  parentId        String?  @db.Uuid

  // Appearance
  color           String?
  icon            String?

  // Configuration
  isSystem        Boolean  @default(false)
  isActive        Boolean  @default(true)

  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  parent          Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children        Category[] @relation("CategoryHierarchy")
  transactions    Transaction[]
  budgets         Budget[]
  rules           TransactionRule[]

  @@unique([tenantId, name, parentId])
  @@map("categories")
  @@schema("tenant")
}

model Transaction {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId        String   @db.Uuid // RLS enforcement

  // Transaction basics
  accountId       String   @db.Uuid
  categoryId      String?  @db.Uuid
  amount          Decimal  @db.Decimal(15, 2)
  currency        String   @default("USD")

  // Transaction details
  description     String
  notes           String?
  date            DateTime

  // Transaction metadata
  type            TransactionType
  status          TransactionStatus @default(POSTED)
  method          PaymentMethod?

  // External references
  externalId      String?  // Bank transaction ID
  checkNumber     String?
  referenceNumber String?

  // Location & merchant
  merchantName    String?
  merchantCategory String?
  location        Json?    // { lat, lng, address }

  // Recurring transaction
  recurringId     String?  @db.Uuid
  isRecurring     Boolean  @default(false)

  // Processing
  isAutoCategorized Boolean @default(false)
  confidence      Float?   // AI categorization confidence

  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  account         Account  @relation(fields: [accountId], references: [id], onDelete: Cascade)
  category        Category? @relation(fields: [categoryId], references: [id])
  recurringTransaction RecurringTransaction? @relation(fields: [recurringId], references: [id])
  splits          TransactionSplit[]
  attachments     TransactionAttachment[]

  @@map("transactions")
  @@schema("tenant")
}

model TransactionSplit {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId        String   @db.Uuid // RLS enforcement
  transactionId   String   @db.Uuid

  // Split details
  categoryId      String?  @db.Uuid
  amount          Decimal  @db.Decimal(15, 2)
  description     String?

  // Metadata
  createdAt       DateTime @default(now())

  // Relations
  transaction     Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@map("transaction_splits")
  @@schema("tenant")
}

model TransactionAttachment {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId        String   @db.Uuid // RLS enforcement
  transactionId   String   @db.Uuid

  // File details
  fileName        String
  fileType        String
  fileSize        Int
  fileUrl         String

  // Metadata
  uploadedAt      DateTime @default(now())

  // Relations
  transaction     Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@map("transaction_attachments")
  @@schema("tenant")
}

model RecurringTransaction {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId        String   @db.Uuid // RLS enforcement

  // Basic details
  accountId       String   @db.Uuid
  categoryId      String?  @db.Uuid
  amount          Decimal  @db.Decimal(15, 2)
  description     String

  // Recurrence pattern
  frequency       RecurrenceFrequency
  interval        Int      @default(1) // Every X frequency units
  dayOfWeek       Int?     // 0-6 for weekly
  dayOfMonth      Int?     // 1-31 for monthly
  monthOfYear     Int?     // 1-12 for yearly

  // Schedule
  startDate       DateTime
  endDate         DateTime?
  nextDate        DateTime

  // Status
  isActive        Boolean  @default(true)
  lastProcessed   DateTime?

  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  transactions    Transaction[]

  @@map("recurring_transactions")
  @@schema("tenant")
}

model Budget {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId        String   @db.Uuid // RLS enforcement

  // Budget details
  name            String
  description     String?
  categoryId      String?  @db.Uuid
  accountId       String?  @db.Uuid

  // Amount & period
  amount          Decimal  @db.Decimal(15, 2)
  period          BudgetPeriod
  startDate       DateTime
  endDate         DateTime

  // Tracking
  spent           Decimal  @default(0) @db.Decimal(15, 2)
  remaining       Decimal  @default(0) @db.Decimal(15, 2)
  percentUsed     Float    @default(0)

  // Alerts
  alertThreshold  Float?   // Percentage (0-100)
  alertSent       Boolean  @default(false)

  // Status
  isActive        Boolean  @default(true)

  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  category        Category? @relation(fields: [categoryId], references: [id])
  account         Account? @relation(fields: [accountId], references: [id])

  @@map("budgets")
  @@schema("tenant")
}

model Goal {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId        String   @db.Uuid // RLS enforcement

  // Goal details
  name            String
  description     String?
  type            GoalType

  // Target
  targetAmount    Decimal  @db.Decimal(15, 2)
  currentAmount   Decimal  @default(0) @db.Decimal(15, 2)
  targetDate      DateTime?

  // Linked account
  accountId       String?  @db.Uuid

  // Progress
  percentComplete Float    @default(0)
  isCompleted     Boolean  @default(false)
  completedAt     DateTime?

  // Status
  isActive        Boolean  @default(true)

  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  account         Account? @relation(fields: [accountId], references: [id])

  @@map("goals")
  @@schema("tenant")
}

model TransactionRule {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId        String   @db.Uuid // RLS enforcement

  // Rule details
  name            String
  description     String?
  isActive        Boolean  @default(true)
  priority        Int      @default(0)

  // Conditions (JSON)
  conditions      Json     // { field, operator, value }[]

  // Actions
  categoryId      String?  @db.Uuid
  assignCategory  Boolean  @default(false)

  // Statistics
  timesApplied    Int      @default(0)
  lastApplied     DateTime?

  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  category        Category? @relation(fields: [categoryId], references: [id])

  @@map("transaction_rules")
  @@schema("tenant")
}

// ============================================================================
// WHATSAPP INTEGRATION
// ============================================================================

model WhatsAppSession {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId        String   @db.Uuid // RLS enforcement

  // WhatsApp details
  phoneNumber     String
  contactName     String?

  // Session state
  state           WhatsAppState @default(IDLE)
  context         Json?    // Current conversation context
  lastMessage     String?

  // User mapping
  userId          String?  @db.Uuid
  isAuthenticated Boolean  @default(false)

  // Metadata
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastActiveAt    DateTime @default(now())

  // Relations
  messages        WhatsAppMessage[]

  @@unique([tenantId, phoneNumber])
  @@map("whatsapp_sessions")
  @@schema("tenant")
}

model WhatsAppMessage {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId        String   @db.Uuid // RLS enforcement
  sessionId       String   @db.Uuid

  // Message details
  messageId       String   @unique // WhatsApp message ID
  type            WhatsAppMessageType
  content         String

  // Direction
  direction       MessageDirection
  status          MessageStatus @default(SENT)

  // Processing
  intent          String?  // NLP detected intent
  entities        Json?    // Extracted entities
  processed       Boolean  @default(false)

  // Metadata
  timestamp       DateTime
  createdAt       DateTime @default(now())

  // Relations
  session         WhatsAppSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("whatsapp_messages")
  @@schema("tenant")
}

// ============================================================================
// AUDIT & COMPLIANCE
// ============================================================================

model AuditLog {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId        String   @db.Uuid // RLS enforcement
  userId          String?  @db.Uuid

  // Action details
  action          String   // CREATE, UPDATE, DELETE, LOGIN, etc.
  resource        String   // table/model name
  resourceId      String?  // record ID

  // Changes
  oldValues       Json?
  newValues       Json?

  // Context
  ipAddress       String?
  userAgent       String?
  source          String?  // WEB, API, WHATSAPP, etc.

  // Metadata
  timestamp       DateTime @default(now())

  // Relations
  tenant          Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user            User?    @relation(fields: [userId], references: [id])

  @@map("audit_logs")
  @@schema("public")
}

// ============================================================================
// ENUMS
// ============================================================================

enum PlanType {
  STARTER
  PROFESSIONAL
  ENTERPRISE
  CUSTOM

  @@schema("public")
}

enum BillingCycle {
  MONTHLY
  YEARLY

  @@schema("public")
}

enum TenantStatus {
  ACTIVE
  SUSPENDED
  TRIAL
  EXPIRED

  @@schema("public")
}

enum UserRole {
  OWNER
  ADMIN
  USER
  VIEWER

  @@schema("public")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED

  @@schema("public")
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REVOKED

  @@schema("public")
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  INVESTMENT
  LOAN
  CASH
  OTHER

  @@schema("public")
}

enum AccountSubtype {
  // Checking subtypes
  CHECKING

  // Savings subtypes
  SAVINGS
  MONEY_MARKET
  CD

  // Credit subtypes
  CREDIT_CARD
  LINE_OF_CREDIT

  // Investment subtypes
  BROKERAGE
  RETIREMENT

  // Loan subtypes
  MORTGAGE
  AUTO_LOAN
  STUDENT_LOAN
  PERSONAL_LOAN

  // Other
  PREPAID
  CASH

  @@schema("public")
}

enum CategoryType {
  INCOME
  EXPENSE
  TRANSFER

  @@schema("public")
}

enum TransactionType {
  DEBIT
  CREDIT
  TRANSFER

  @@schema("public")
}

enum TransactionStatus {
  PENDING
  POSTED
  CANCELLED

  @@schema("public")
}

enum PaymentMethod {
  CARD
  BANK_TRANSFER
  CASH
  CHECK
  MOBILE_PAYMENT
  CRYPTOCURRENCY
  OTHER

  @@schema("public")
}

enum RecurrenceFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY

  @@schema("public")
}

enum BudgetPeriod {
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY

  @@schema("public")
}

enum GoalType {
  SAVINGS
  DEBT_PAYOFF
  INVESTMENT
  PURCHASE
  EMERGENCY_FUND

  @@schema("public")
}

enum WhatsAppState {
  IDLE
  AUTHENTICATING
  MAIN_MENU
  ADD_TRANSACTION
  VIEW_BALANCE
  VIEW_TRANSACTIONS
  SET_BUDGET
  VIEW_REPORTS

  @@schema("public")
}

enum WhatsAppMessageType {
  TEXT
  IMAGE
  DOCUMENT
  AUDIO
  VIDEO
  LOCATION
  CONTACT

  @@schema("public")
}

enum MessageDirection {
  INBOUND
  OUTBOUND

  @@schema("public")
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  FAILED

  @@schema("public")
}